@model BookReviews.Models.BookDetailsViewModel

@{
    ViewData["Title"] = "Book Details";
    Layout = "_Layout";
}

<h1>@Model.Book.Title</h1>

<dl class="row">
    <dt class="col-sm-2">@Html.DisplayNameFor(m => m.Book.Author)</dt>
    <dd class="col-sm-10">@Model.Book.Author</dd>

    <dt class="col-sm-2">@Html.DisplayNameFor(m => m.Book.PublishedYear)</dt>
    <dd class="col-sm-10">@Model.Book.PublishedYear</dd>

    <dt class="col-sm-2">@Html.DisplayNameFor(m => m.Book.Genre)</dt>
    <dd class="col-sm-10">@Model.Book.Genre</dd>
</dl>

<hr />

<h2>Reviews</h2>

@if (TempData["VoteError"] != null)
{
    <div class="alert alert-danger">
        @TempData["VoteError"]
    </div>
}

@if (!Model.Reviews.Any())
{
    <p>No reviews yet. Be the first to post!</p>
}
else
{
    foreach (var r in Model.Reviews)
    {
        <div class="card mb-2">
            <div class="card-body">
                <strong>@r.User?.UserName</strong> rated it <strong>@r.Rating</strong>
                <p>@r.Content</p>
                <small class="text-muted">@r.DateCreated.ToLocalTime():g</small>

                <p>
                    Votes: @(r.Votes?.Count(v => v.IsUpvote) - r.Votes?.Count(v => !v.IsUpvote) ?? 0)
                </p>

                @if (User.Identity?.IsAuthenticated ?? false)
                {
                    <form asp-controller="Reviews" asp-action="Vote" method="post" class="d-inline">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="reviewId" value="@r.Id" />
                        <input type="hidden" name="isUpvote" value="true" />
                        <button type="submit" class="btn btn-sm btn-success">👍 Upvote</button>
                    </form>

                    <form asp-controller="Reviews" asp-action="Vote" method="post" class="d-inline">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="reviewId" value="@r.Id" />
                        <input type="hidden" name="isUpvote" value="false" />
                        <button type="submit" class="btn btn-sm btn-danger">👎 Downvote</button>
                    </form>
                }
            </div>
        </div>
    }
}

<hr />

@if (User.Identity?.IsAuthenticated ?? false)
{
    <h3>Add Your Review</h3>

    @Html.ValidationSummary(false, "", new { @class = "text-danger" })

    <form asp-action="Details" method="post">
        @Html.AntiForgeryToken()

        <input type="hidden" name="Book.Id" value="@Model.Book.Id" />
        <input type="hidden" name="Book.Title" value="@Model.Book.Title" />

        <div class="mb-3">
            <label asp-for="InputReview.Content" class="form-label">Review</label>
            <textarea asp-for="InputReview.Content" class="form-control"></textarea>
            <span asp-validation-for="InputReview.Content" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="InputReview.Rating" class="form-label">Rating (1–5)</label>
            <select asp-for="InputReview.Rating" class="form-select">
                <option value="">Choose rating</option>
                @for (int i = 1; i <= 5; i++)
                {
                    <option value="@i">@i</option>
                }
            </select>
            <span asp-validation-for="InputReview.Rating" class="text-danger"></span>
        </div>

        <button type="submit" class="btn btn-primary">Submit Review</button>
    </form>
}
else
{
    <p>
        <a asp-area="Identity" asp-page="/Account/Login">Log in</a> to post a review.
    </p>
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
